import os
import re
import asyncio
import json
import threading
from datetime import datetime, timedelta
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import logging
from telethon import TelegramClient, events
from telethon.types import KeyboardButton, ReplyKeyboardMarkup
from flask import Flask

# ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======
API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

SHEET_ID = '1QG1MWTZveCVUf8tBUUgRqZEA83qW_gZZSgV4sZiAuhM'
SETTINGS_SHEET = 'SETTINGS'
REPORTS_SHEET = 'REPORTS'
PARTICIPANTS_SHEET = 'PARTICIPANTS'

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

ADMIN_CHAT_ID = "741688548"  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID (—É–∑–Ω–∞–π —á–µ—Ä–µ–∑ @userinfobot)

# ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== GOOGLE SHEETS ======
def get_sheet_service():
    credentials_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")
    if not credentials_json:
        raise Exception("‚ùå GOOGLE_APPLICATION_CREDENTIALS_JSON is not set!")

    creds_dict = json.loads(credentials_json)
    creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
    return build('sheets', 'v4', credentials=creds).spreadsheets()

def load_settings(service):
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{SETTINGS_SHEET}!A:E").execute()
    values = result.get('values', [])
    settings = []
    for row in values[1:]:
        if len(row) < 5 or row[3].lower() != '–¥–∞':
            continue
        settings.append({
            'topic_name': row[0],
            'deadline': row[1],  # HH:MM
            'format_pattern': row[2],
            'chat_id': row[4]
        })
    return settings

def load_participants(service):
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{PARTICIPANTS_SHEET}!A:A").execute()
    values = result.get('values', [])
    return [row[0].strip() for row in values[1:] if row and row[0].strip()]

def record_submission(service, topic, participant, status, send_time, link=""):
    now = datetime.now().strftime("%Y-%m-%d")
    row = [now, topic, participant, status, send_time, link]
    service.values().append(
        spreadsheetId=SHEET_ID,
        range=f"{REPORTS_SHEET}!A:F",
        valueInputOption="USER_ENTERED",
        body={"values": [row]}
    ).execute()

def extract_name(text):
    match = re.search(r'#([–ê-–Ø–∞-—è–Å—ë]+_[–ê-–Ø–∞-—è–Å—ë]+)', text)
    return match.group(1) if match else None

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ======
async def handle_message(event, client, service, settings_map):
    message = event.message
    if not message.is_topic_message:
        return

    topic_name = message.topic_name
    text = message.text or ""
    chat_id = str(message.peer_id.channel_id)

    setting = settings_map.get(topic_name)
    if not setting:
        return

    name = extract_name(text)
    if not name:
        logger.info(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {text} | –¢–µ–º–∞: {topic_name}")
        return

    today = datetime.now().strftime("%Y-%m-%d")
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
    rows = result.get('values', [])
    for row in rows[1:]:
        if len(row) >= 3 and row[0] == today and row[1] == topic_name and row[2] == name:
            logger.info(f"–£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {name} –≤ {topic_name}")
            return

    deadline_str = setting['deadline']
    deadline_hour, deadline_min = map(int, deadline_str.split(':'))
    now = datetime.now()
    deadline = now.replace(hour=deadline_hour, minute=deadline_min, second=0, microsecond=0)
    status = "–°–¥–∞–ª" if now <= deadline else "–û–ø–æ–∑–¥–∞–ª"

    link = f"https://t.me/c/{chat_id[4:]}/{message.id}" if chat_id.startswith('-100') else ""

    record_submission(service, topic_name, name, status, now.strftime("%H:%M"), link)
    logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {name} ({status}) –≤ {topic_name}")

# ====== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (–ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ) ======
async def force_check(client, service, settings, participants):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–µ–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().strftime("%Y-%m-%d")
    report_lines = []

    for setting in settings:
        topic = setting['topic_name']
        deadline = setting['deadline']

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ —Å–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è
        result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
        rows = result.get('values', [])
        submitted = set()
        for row in rows[1:]:
            if len(row) >= 3 and row[0] == today and row[1] == topic:
                submitted.add(row[2])

        missing = [p for p in participants if p not in submitted]

        if missing:
            report_lines.append(f"üìå *{topic}* (–¥–µ–¥–ª–∞–π–Ω {deadline}):")
            report_lines.append("‚ùå –ù–µ —Å–¥–∞–ª–∏: " + ", ".join(missing))
            report_lines.append("")

    if report_lines:
        message = "\n".join(report_lines)
        try:
            await client.send_message(ADMIN_CHAT_ID, message, parse_mode='markdown')
            logger.info("üì© –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
        return message
    else:
        message = "‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è!"
        try:
            await client.send_message(ADMIN_CHAT_ID, message, parse_mode='markdown')
            logger.info("üì© –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
        return message

# ====== –ï–ñ–ï–ß–ê–°–û–í–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê ======
async def scheduled_force_check(client, service, settings, participants):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç"""
    while True:
        try:
            logger.info("‚è≥ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            await force_check(client, service, settings, participants)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        await asyncio.sleep(60 * 60)  # 60 –º–∏–Ω—É—Ç

# ====== FLASK HTTP-–°–ï–†–í–ï–† (–¥–ª—è Render) ======
app = Flask(__name__)

@app.route('/')
def health():
    return "‚úÖ Telegram bot is running!", 200

@app.route('/check', methods=['GET'])
def check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑–≤–Ω–µ)"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω-–∑–∞—â–∏—Ç—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return "<pre>üü¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.</pre>", 200
    except Exception as e:
        return f"<pre>‚ùå –û—à–∏–±–∫–∞: {str(e)}</pre>", 500

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port, threaded=True)

flask_thread = threading.Thread(target=run_flask, daemon=True)
flask_thread.start()

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main():
    service = get_sheet_service()
    settings = load_settings(service)
    participants = load_participants(service)
    settings_map = {s['topic_name']: s for s in settings}

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient('shbm_session', API_ID, API_HASH)
    await client.start(bot_token=BOT_TOKEN)
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–ª—É—à–∞—é —Ç–µ–º—ã...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –±–æ—Ç–∞
    button = KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")
    markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=False)
    await client.send_message(ADMIN_CHAT_ID, "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å' –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.", buttons=markup)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    @client.on(events.NewMessage(incoming=True, pattern=r'^üîç\s*–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å$'))
    async def on_button_press(event):
        logger.info("üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'")
        await event.reply("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        await force_check(client, service, settings, participants)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–∞—Ö
    @client.on(events.NewMessage(incoming=True))
    async def handler(event):
        await handle_message(event, client, service, settings_map)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ—á–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    asyncio.create_task(scheduled_force_check(client, service, settings, participants))

    # –ñ–¥—ë–º —Å–æ–±—ã—Ç–∏–π
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
