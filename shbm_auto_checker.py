import os
import re
import asyncio
import json
import time
from datetime import datetime
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import logging
from telethon import TelegramClient, events
from telethon.sessions import MemorySession  # ‚Üê –ù–û–í–´–ô –≠–õ–ï–ú–ï–ù–¢!
from aiohttp import web

# ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======
API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

SHEET_ID = '1QG1MWTZveCVUf8tBUUgRqZEA83qW_gZZSgV4sZiAuhM'
SETTINGS_SHEET = 'SETTINGS'
REPORTS_SHEET = 'REPORTS'
PARTICIPANTS_SHEET = 'PARTICIPANTS'

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

ADMIN_CHAT_ID = 741688548  # ‚Üê –í–∞—à ID

# ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== GOOGLE SHEETS ======
def get_sheet_service():
    credentials_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")
    if not credentials_json:
        logger.critical("‚ùå GOOGLE_APPLICATION_CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        raise Exception("‚ùå GOOGLE_APPLICATION_CREDENTIALS_JSON is not set!")

    creds_dict = json.loads(credentials_json)
    creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
    service = build('sheets', 'v4', credentials=creds)
    logger.info("‚úÖ Google Sheets API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service.spreadsheets()

def load_settings(service):
    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ª–∏—Å—Ç–∞ SETTINGS...")
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{SETTINGS_SHEET}!A:E").execute()
    values = result.get('values', [])
    settings = {}
    for row in values[1:]:
        if len(row) < 5 or row[3].lower() != '–¥–∞':
            continue
        topic = row[0]
        settings[topic] = {
            'deadline': row[1],
            'format_pattern': row[2],
            'chat_id': row[4]
        }
        logger.info(f"   üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {topic} | –¥–µ–¥–ª–∞–π–Ω {row[1]}")
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(settings)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º: {list(settings.keys())}")
    return settings

def load_participants(service):
    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ PARTICIPANTS...")
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{PARTICIPANTS_SHEET}!A:A").execute()
    values = result.get('values', [])
    participants = [row[0].strip() for row in values[1:] if row and row[0].strip()]
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants}")
    return participants

def record_submission(service, topic, participant, status, send_time, link=""):
    now = datetime.now().strftime("%Y-%m-%d")
    row = [now, topic, participant, status, send_time, link]
    logger.info(f"üìù –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É REPORTS: {row}")

    try:
        service.values().append(
            spreadsheetId=SHEET_ID,
            range=f"{REPORTS_SHEET}!A:F",
            valueInputOption="USER_ENTERED",
            body={"values": [row]}
        ).execute()
        logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {participant} –≤ {topic}")
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {str(e)}")
        logger.error(f"   - –¢–∞–±–ª–∏—Ü–∞ ID: {SHEET_ID}")
        logger.error(f"   - –õ–∏—Å—Ç: {REPORTS_SHEET}")
        logger.error(f"   - –î–∞–Ω–Ω—ã–µ: {row}")
        logger.error(f"   - –û—à–∏–±–∫–∞ —Ç–∏–ø–∞: {type(e).__name__}")

# ====== –ü–ê–†–°–ò–ù–ì –•–≠–®–¢–ï–ì–ê ======
def extract_name(text):
    match = re.search(r'#([–ê-–Ø–∞-—è–Å—ë]+_[–ê-–Ø–∞-—è–Å—ë]+)', text)
    if not match:
        logger.debug(f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω —Ö—ç—à—Ç–µ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text[:50]}...")
        return None
    name_with_underscore = match.group(1)
    name_normalized = name_with_underscore.replace('_', ' ')
    logger.info(f"üè∑Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ö—ç—à—Ç–µ–≥: '{name_with_underscore}' ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: '{name_normalized}'")
    return name_normalized

# ====== –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ï–ú ======
async def check_all_topics(client, service, settings, participants):
    today = datetime.now().strftime("%Y-%m-%d")
    logger.info(f"‚è≥ –ó–∞–ø—É—Å–∫ –æ–±—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–µ–º –Ω–∞ –¥–∞—Ç—É: {today}")

    report_lines = []

    for topic, setting in settings.items():
        deadline = setting['deadline']
        logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã: {topic} (–¥–µ–¥–ª–∞–π–Ω {deadline})")

        result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
        rows = result.get('values', [])
        submitted = set()
        for row in rows[1:]:
            if len(row) >= 3 and row[0] == today and row[1] == topic:
                submitted.add(row[2])

        missing = [p for p in participants if p not in submitted]

        if missing:
            report_lines.append(f"üìå *{topic}* (–¥–µ–¥–ª–∞–π–Ω {deadline}):")
            report_lines.append("‚ùå –ù–µ —Å–¥–∞–ª–∏: " + ", ".join(missing))
            report_lines.append("")
        else:
            logger.info(f"   ‚úÖ –í—Å–µ —Å–¥–∞–ª–∏: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

    if report_lines:
        message = "\n".join(report_lines)
        logger.info(f"üì© –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É:\n{message}")
        try:
            await client.send_message(ADMIN_CHAT_ID, message, parse_mode='markdown')
            logger.info("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
        return message
    else:
        message = "‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è!"
        logger.info(f"üì© –û—Ç—á—ë—Ç: {message}")
        try:
            await client.send_message(ADMIN_CHAT_ID, message, parse_mode='markdown')
            logger.info("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
        return message

# ====== –ü–†–û–í–ï–†–ö–ê –û–î–ù–û–ô –¢–ï–ú–´ ======
async def check_specific_topic(client, service, settings, participants, topic_name):
    if topic_name not in settings:
        await client.send_message(ADMIN_CHAT_ID, f"‚ùå –¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    today = datetime.now().strftime("%Y-%m-%d")
    setting = settings[topic_name]
    deadline = setting['deadline']
    logger.info(f"‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º—ã: {topic_name} (–¥–µ–¥–ª–∞–π–Ω {deadline})")

    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
    rows = result.get('values', [])
    submitted = set()
    for row in rows[1:]:
        if len(row) >= 3 and row[0] == today and row[1] == topic_name:
            submitted.add(row[2])

    missing = [p for p in participants if p not in submitted]

    if missing:
        message = f"üìå *{topic_name}* (–¥–µ–¥–ª–∞–π–Ω {deadline}):\n‚ùå –ù–µ —Å–¥–∞–ª–∏: " + ", ".join(missing)
    else:
        message = f"‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–µ–º–µ *{topic_name}*!"

    logger.info(f"üì© –û—Ç—á—ë—Ç –¥–ª—è {topic_name}: {message}")
    try:
        await client.send_message(ADMIN_CHAT_ID, message, parse_mode='markdown')
        logger.info("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í –¢–ï–ú–ê–• ======
async def handle_message(event, client, service, settings_map):
    message = event.message
    logger.info(f"üì© –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: {message.text[:100]}...")

    if not hasattr(message.peer_id, 'channel_id'):
        logger.debug("   ‚ùå –≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    topic_name = getattr(message, 'topic_name', None)
    if not topic_name:
        logger.debug("   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ç–µ–º–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    logger.info(f"   üìå –¢–µ–º–∞: {topic_name}")

    setting = settings_map.get(topic_name)
    if not setting:
        logger.error(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ–º—ã: '{topic_name}'")
        logger.error(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: {list(settings_map.keys())}")
        return

    text = message.text or ""
    chat_id = str(message.peer_id.channel_id)

    name = extract_name(text)
    if not name:
        logger.warning(f"   ‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text}")
        return

    today = datetime.now().strftime("%Y-%m-%d")
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
    rows = result.get('values', [])
    for row in rows[1:]:
        if len(row) >= 3 and row[0] == today and row[1] == topic_name and row[2] == name:
            logger.info(f"   ‚úÖ –£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {name} –≤ {topic_name}")
            return

    deadline_str = setting['deadline']
    try:
        deadline_hour, deadline_min = map(int, deadline_str.split(':'))
    except ValueError:
        logger.error(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞: {deadline_str}")
        return

    now = datetime.now()
    deadline = now.replace(hour=deadline_hour, minute=deadline_min, second=0, microsecond=0)
    status = "–°–¥–∞–ª" if now <= deadline else "–û–ø–æ–∑–¥–∞–ª"

    link = f"https://t.me/c/{chat_id[4:]}/{message.id}" if chat_id.startswith('-100') else ""

    record_submission(service, topic_name, name, status, now.strftime("%H:%M"), link)
    logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û: {name} ({status}) –≤ {topic_name} ‚Äî –≤—Ä–µ–º—è: {now.strftime('%H:%M')}")

# ====== HTTP-–°–ï–†–í–ï–† –ù–ê AIOHTTP ======
async def health_check(request):
    return web.Response(text="‚úÖ Telegram bot is running!", content_type="text/plain")

app = web.Application()
app.router.add_get('/', health_check)

# ====== –ó–ê–ü–£–°–ö TELEGRAM-–ë–û–¢–ê (–ë–ï–ó –§–ê–ô–õ–û–í–´–• –°–ï–°–°–ò–ô!) ======
async def start_telegram_bot():
    global client, service, settings, participants

    service = get_sheet_service()
    settings = load_settings(service)
    participants = load_participants(service)

    # üöÄ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º MemorySession ‚Äî –ù–ï–¢ .session —Ñ–∞–π–ª–∞!
    client = TelegramClient(
        MemorySession(),  # ‚Üê –í–°–Å –í –ü–ê–ú–Ø–¢–ò ‚Äî –ù–ï–¢ –ë–õ–û–ö–ò–†–û–í–ö–ò!
        API_ID,
        API_HASH
    )

    await client.start(bot_token=BOT_TOKEN)
    logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram")

    @client.on(events.NewMessage(incoming=True, pattern=r'^/check_all$'))
    async def on_check_all(event):
        logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /check_all")
        await event.reply("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ç–µ–º...")
        await check_all_topics(client, service, settings, participants)

    @client.on(events.NewMessage(incoming=True, pattern=r'^/check_(.+)$'))
    async def on_check_topic(event):
        topic_name = event.pattern_match.group(1).strip()
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /check_{topic_name}")
        await event.reply(f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–º—ã: {topic_name}...")
        await check_specific_topic(client, service, settings, participants, topic_name)

    @client.on(events.NewMessage(incoming=True))
    async def handler(event):
        await handle_message(event, client, service, settings)

    logger.info("üì° –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await client.run_until_disconnected()

# ====== –ó–ê–ü–£–°–ö HTTP-–°–ï–†–í–ï–†–ê ======
async def start_http_server():
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, host='0.0.0.0', port=port)
    await site.start()
    logger.info(f"üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

# ====== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ======
async def main():
    http_task = asyncio.create_task(start_http_server())
    bot_task = asyncio.create_task(start_telegram_bot())

    done, pending = await asyncio.wait([http_task, bot_task], return_when=asyncio.FIRST_COMPLETED)

    for task in pending:
        task.cancel()

    logger.critical("‚ö†Ô∏è Telegram –±–æ—Ç —É–ø–∞–ª ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
    await asyncio.sleep(10)

if __name__ == '__main__':
    logger.info("üèÅ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ shbm_auto_checker.py...")
    while True:
        try:
            asyncio.run(main())
        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except Exception as e:
            logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
            time.sleep(10)
