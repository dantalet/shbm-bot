import os
import re
import asyncio
from datetime import datetime, timedelta
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import logging
from telethon import TelegramClient, events
from telethon.tl.types import MessageEntityHashtag

# ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======
API_ID = '20299753'
API_HASH = '946ca1572df8a667a3bd81d78370310d'
BOT_TOKEN = '8363948497:AAGvcnuftvrZbaHMBubIbtevRlPRPXaLFfw'

SHEET_ID = '1QG1MWTZveCVUf8tBUUgRqZEA83qW_gZZSgV4sZiAuhM'  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô!
CREDENTIALS_FILE = 'credentials.json'

SETTINGS_SHEET = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
REPORTS_SHEET = '–û—Ç—á–µ—Ç—ã'
PARTICIPANTS_SHEET = '–£—á–∞—Å—Ç–Ω–∏–∫–∏'

# ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== GOOGLE SHEETS ======
def get_sheet_service():
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scopes)
    return build('sheets', 'v4', credentials=creds).spreadsheets()

def load_settings(service):
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{SETTINGS_SHEET}!A:E").execute()
    values = result.get('values', [])
    settings = []
    for row in values[1:]:
        if len(row) < 5 or row[3].lower() != '–¥–∞':  # –∞–∫—Ç–∏–≤–Ω–∞?
            continue
        settings.append({
            'topic_name': row[0],
            'deadline': row[1],  # HH:MM
            'format_pattern': row[2],
            'chat_id': row[4]
        })
    return settings

def load_participants(service):
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{PARTICIPANTS_SHEET}!A:A").execute()
    values = result.get('values', [])
    return [row[0].strip() for row in values[1:] if row and row[0].strip()]

def record_submission(service, topic, participant, status, send_time, link=""):
    now = datetime.now().strftime("%Y-%m-%d")
    row = [now, topic, participant, status, send_time, link]
    service.values().append(
        spreadsheetId=SHEET_ID,
        range=f"{REPORTS_SHEET}!A:F",
        valueInputOption="USER_ENTERED",
        body={"values": [row]}
    ).execute()

# ====== –ü–ê–†–°–ò–ù–ì ======
def extract_name(text):
    match = re.search(r'#([–ê-–Ø–∞-—è–Å—ë]+_[–ê-–Ø–∞-—è–Å—ë]+)', text)
    return match.group(1) if match else None

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ======
async def handle_message(event, client, service, settings_map):
    message = event.message
    if not message.is_topic_message:
        return

    topic_name = message.topic_name
    text = message.text or ""
    sender = message.from_user.first_name
    username = getattr(message.from_user, 'username', None)
    chat_id = str(message.peer_id.channel_id)  # ID –≥—Ä—É–ø–ø—ã

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
    setting = settings_map.get(topic_name)
    if not setting:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    name = extract_name(text)
    if not name:
        logger.info(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {text} | –¢–µ–º–∞: {topic_name}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∂–µ –∏–º–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime("%Y-%m-%d")
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
    rows = result.get('values', [])
    for row in rows[1:]:
        if len(row) >= 3 and row[0] == today and row[1] == topic_name and row[2] == name:
            logger.info(f"–£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {name} –≤ {topic_name}")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω
    deadline_str = setting['deadline']
    deadline_hour, deadline_min = map(int, deadline_str.split(':'))
    now = datetime.now()
    deadline = now.replace(hour=deadline_hour, minute=deadline_min, second=0, microsecond=0)
    status = "–°–¥–∞–ª" if now <= deadline else "–û–ø–æ–∑–¥–∞–ª"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    link = f"https://t.me/c/{chat_id[4:]}/{message.id}" if chat_id.startswith('-100') else ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    record_submission(service, topic_name, name, status, now.strftime("%H:%M"), link)
    logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {name} ({status}) –≤ {topic_name}")

# ====== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢ ======
async def daily_report(service, settings, participants):
    today = datetime.now().strftime("%Y-%m-%d")
    report_lines = []

    for setting in settings:
        topic = setting['topic_name']
        deadline = setting['deadline']

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ —Å–¥–∞–ª
        result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
        rows = result.get('values', [])
        submitted = set()
        for row in rows[1:]:
            if len(row) >= 3 and row[0] == today and row[1] == topic:
                submitted.add(row[2])

        missing = [p for p in participants if p not in submitted]

        if missing:
            report_lines.append(f"üìå *{topic}* (–¥–µ–¥–ª–∞–π–Ω {deadline}):")
            report_lines.append("‚ùå –ù–µ —Å–¥–∞–ª–∏: " + ", ".join(missing))
            report_lines.append("")

    if report_lines:
        admin_chat_id = "741688548"  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô (—É–∑–Ω–∞–π —á–µ—Ä–µ–∑ @userinfobot)
        await send_telegram_message(admin_chat_id, "\n".join(report_lines))

async def send_telegram_message(chat_id, text):
    """–ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telethon –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    # –ù–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–æ–∂–Ω–æ –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    print("üì© –û—Ç—á—ë—Ç:", text)

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main():
    service = get_sheet_service()
    settings = load_settings(service)
    participants = load_participants(service)

    # –°–ª–æ–≤–∞—Ä—å: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã -> –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    settings_map = {s['topic_name']: s for s in settings}

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient('shbm_session', API_ID, API_HASH)

    await client.start(bot_token=BOT_TOKEN)
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–ª—É—à–∞—é —Ç–µ–º—ã...")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    @client.on(events.NewMessage(incoming=True))
    async def handler(event):
        await handle_message(event, client, service, settings_map)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 12:00 (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ cron ‚Äî –ø—Ä–æ—â–µ)
    # –î–ª—è —Ç–µ—Å—Ç–∞ ‚Äî –∑–∞–ø—É—Å—Ç–∏–º –æ–¥–∏–Ω —Ä–∞–∑ —Å–µ–π—á–∞—Å
    await daily_report(service, settings, participants)

    # –ñ–¥—ë–º —Å–æ–±—ã—Ç–∏–π
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())