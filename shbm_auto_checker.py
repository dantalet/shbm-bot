import os
import re
import asyncio
import json
import threading
from datetime import datetime
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import logging
from telethon import TelegramClient, events
from telethon.tl.types import KeyboardButton, ReplyKeyboardMarkup
from flask import Flask

# ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚Äî –õ–ê–¢–ò–ù–ò–¶–ê –ò –¢–û–ß–ù–´–ï –ù–ê–ó–í–ê–ù–ò–Ø ======
API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

SHEET_ID = '1QG1MWTZveCVUf8tBUUgRqZEA83qW_gZZSgV4sZiAuhM'  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π!
SETTINGS_SHEET = 'SETTINGS'
REPORTS_SHEET = 'REPORTS'
PARTICIPANTS_SHEET = 'PARTICIPANTS'

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

# üîë ADMIN_CHAT_ID ‚Äî –¶–ï–õ–û–ï –ß–ò–°–õ–û! (—É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)
ADMIN_CHAT_ID = 741688548  # ‚Üê –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–û int, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞!

# ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ‚Äî –ü–û–î–†–û–ë–ù–û–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== GOOGLE SHEETS ======
def get_sheet_service():
    credentials_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")
    if not credentials_json:
        logger.critical("‚ùå GOOGLE_APPLICATION_CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        raise Exception("‚ùå GOOGLE_APPLICATION_CREDENTIALS_JSON is not set!")

    creds_dict = json.loads(credentials_json)
    creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
    service = build('sheets', 'v4', credentials=creds)
    logger.info("‚úÖ Google Sheets API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service.spreadsheets()

def load_settings(service):
    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ª–∏—Å—Ç–∞ SETTINGS...")
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{SETTINGS_SHEET}!A:E").execute()
    values = result.get('values', [])
    settings = {}
    for row in values[1:]:
        if len(row) < 5 or row[3].lower() != '–¥–∞':
            continue
        topic = row[0]
        settings[topic] = {
            'deadline': row[1],  # HH:MM
            'format_pattern': row[2],
            'chat_id': row[4]
        }
        logger.info(f"   üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {topic} | –¥–µ–¥–ª–∞–π–Ω {row[1]}")
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(settings)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º: {list(settings.keys())}")
    return settings

def load_participants(service):
    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ PARTICIPANTS...")
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{PARTICIPANTS_SHEET}!A:A").execute()
    values = result.get('values', [])
    participants = [row[0].strip() for row in values[1:] if row and row[0].strip()]
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants}")
    return participants

def record_submission(service, topic, participant, status, send_time, link=""):
    now = datetime.now().strftime("%Y-%m-%d")
    row = [now, topic, participant, status, send_time, link]
    logger.info(f"üìù –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É REPORTS: {row}")
    try:
        service.values().append(
            spreadsheetId=SHEET_ID,
            range=f"{REPORTS_SHEET}!A:F",
            valueInputOption="USER_ENTERED",
            body={"values": [row]}
        ).execute()
        logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {participant} –≤ {topic}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

# ====== –ü–ê–†–°–ò–ù–ì –•–≠–®–¢–ï–ì–ê ‚Äî –ì–ò–ë–ö–ê–Ø –õ–û–ì–ò–ö–ê ======
def extract_name(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç #–§–∞–º–∏–ª–∏—è_–ò–º—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –§–∞–º–∏–ª–∏—è –ò–º—è"""
    match = re.search(r'#([–ê-–Ø–∞-—è–Å—ë]+_[–ê-–Ø–∞-—è–Å—ë]+)', text)
    if not match:
        logger.debug(f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω —Ö—ç—à—Ç–µ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text[:50]}...")
        return None
    name_with_underscore = match.group(1)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–±–µ–ª –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π
    name_normalized = name_with_underscore.replace('_', ' ')
    logger.info(f"üè∑Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ö—ç—à—Ç–µ–≥: '{name_with_underscore}' ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: '{name_normalized}'")
    return name_normalized

# ====== –û–ë–©–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ï–ú ======
async def check_all_topics(client, service, settings, participants):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ç–µ–º—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().strftime("%Y-%m-%d")
    logger.info(f"‚è≥ –ó–∞–ø—É—Å–∫ –æ–±—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–µ–º –Ω–∞ –¥–∞—Ç—É: {today}")

    report_lines = []

    for topic, setting in settings.items():
        deadline = setting['deadline']
        logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã: {topic} (–¥–µ–¥–ª–∞–π–Ω {deadline})")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ —Å–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è
        result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
        rows = result.get('values', [])
        submitted = set()
        for row in rows[1:]:
            if len(row) >= 3 and row[0] == today and row[1] == topic:
                submitted.add(row[2])
                logger.debug(f"   üë§ {row[2]} —Å–¥–∞–ª –≤ {row[4]}")

        # –î–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫—Ç–æ –Ω–µ —Å–¥–∞–ª ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º "–ù–µ —Å–¥–∞–ª"
        missing = [p for p in participants if p not in submitted]
        for name in missing:
            already_recorded = any(
                row[0] == today and row[1] == topic and row[2] == name and row[3] == "–ù–µ —Å–¥–∞–ª"
                for row in rows[1:]
            )
            if not already_recorded:
                record_submission(service, topic, name, "–ù–µ —Å–¥–∞–ª", "‚Äî", "")
                logger.info(f"üìâ –ó–∞–ø–∏—Å–∞–Ω–æ: {name} ‚Äî –ù–µ —Å–¥–∞–ª (–≤ —Ç–∞–±–ª–∏—Ü—É)")

        if missing:
            report_lines.append(f"üìå *{topic}* (–¥–µ–¥–ª–∞–π–Ω {deadline}):")
            report_lines.append("‚ùå –ù–µ —Å–¥–∞–ª–∏: " + ", ".join(missing))
            report_lines.append("")
            logger.info(f"   ‚ùå –ù–µ —Å–¥–∞–ª–∏: {missing}")
        else:
            logger.info(f"   ‚úÖ –í—Å–µ —Å–¥–∞–ª–∏: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

    if report_lines:
        message = "\n".join(report_lines)
        logger.info(f"üì© –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É:\n{message}")
        try:
            await client.send_message(ADMIN_CHAT_ID, message, parse_mode='markdown')
            logger.info("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
        return message
    else:
        message = "‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è!"
        logger.info(f"üì© –û—Ç—á—ë—Ç: {message}")
        try:
            await client.send_message(ADMIN_CHAT_ID, message, parse_mode='markdown')
            logger.info("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
        return message

# ====== –ü–†–û–í–ï–†–ö–ê –û–î–ù–û–ô –ö–û–ù–ö–†–ï–¢–ù–û–ô –¢–ï–ú–´ ======
async def check_specific_topic(client, service, settings, participants, topic_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É"""
    if topic_name not in settings:
        await client.send_message(ADMIN_CHAT_ID, f"‚ùå –¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    today = datetime.now().strftime("%Y-%m-%d")
    setting = settings[topic_name]
    deadline = setting['deadline']
    logger.info(f"‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º—ã: {topic_name} (–¥–µ–¥–ª–∞–π–Ω {deadline})")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ —Å–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
    rows = result.get('values', [])
    submitted = set()
    for row in rows[1:]:
        if len(row) >= 3 and row[0] == today and row[1] == topic_name:
            submitted.add(row[2])
            logger.debug(f"   üë§ {row[2]} —Å–¥–∞–ª –≤ {row[4]}")

    # –î–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫—Ç–æ –Ω–µ —Å–¥–∞–ª ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º "–ù–µ —Å–¥–∞–ª"
    missing = [p for p in participants if p not in submitted]
    for name in missing:
        already_recorded = any(
            row[0] == today and row[1] == topic_name and row[2] == name and row[3] == "–ù–µ —Å–¥–∞–ª"
            for row in rows[1:]
        )
        if not already_recorded:
            record_submission(service, topic_name, name, "–ù–µ —Å–¥–∞–ª", "‚Äî", "")
            logger.info(f"üìâ –ó–∞–ø–∏—Å–∞–Ω–æ: {name} ‚Äî –ù–µ —Å–¥–∞–ª (–≤ —Ç–∞–±–ª–∏—Ü—É)")

    if missing:
        message = f"üìå *{topic_name}* (–¥–µ–¥–ª–∞–π–Ω {deadline}):\n‚ùå –ù–µ —Å–¥–∞–ª–∏: " + ", ".join(missing)
    else:
        message = f"‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–µ–º–µ *{topic_name}*!"

    logger.info(f"üì© –û—Ç—á—ë—Ç –¥–ª—è {topic_name}: {message}")
    try:
        await client.send_message(ADMIN_CHAT_ID, message, parse_mode='markdown')
        logger.info("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í –¢–ï–ú–ê–• ‚Äî –¢–û–õ–¨–ö–û –î–õ–Ø –ó–ê–ü–ò–°–ò –í –¢–ê–ë–õ–ò–¶–£ ======
async def handle_message(event, client, service, settings_map):
    message = event.message
    logger.info(f"üì© –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: {message.text[:100]}...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ (–Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç)
    if not hasattr(message.peer_id, 'channel_id'):
        logger.debug("   ‚ùå –≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    topic_name = getattr(message, 'topic_name', None)
    if not topic_name:
        logger.debug("   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ç–µ–º–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    logger.info(f"   üìå –¢–µ–º–∞: {topic_name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
    setting = settings_map.get(topic_name)
    if not setting:
        logger.error(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ–º—ã: '{topic_name}'")
        logger.error(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: {list(settings_map.keys())}")
        return
    else:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ–º—ã: {setting}")

    text = message.text or ""
    chat_id = str(message.peer_id.channel_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ —Ö—ç—à—Ç–µ–≥–∞
    name = extract_name(text)
    if not name:
        logger.warning(f"   ‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∂–µ –∏–º–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime("%Y-%m-%d")
    result = service.values().get(spreadsheetId=SHEET_ID, range=f"{REPORTS_SHEET}!A:C").execute()
    rows = result.get('values', [])
    for row in rows[1:]:
        if len(row) >= 3 and row[0] == today and row[1] == topic_name and row[2] == name:
            logger.info(f"   ‚úÖ –£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {name} –≤ {topic_name}")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω
    deadline_str = setting['deadline']
    try:
        deadline_hour, deadline_min = map(int, deadline_str.split(':'))
    except ValueError:
        logger.error(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞: {deadline_str}")
        return

    now = datetime.now()
    deadline = now.replace(hour=deadline_hour, minute=deadline_min, second=0, microsecond=0)
    status = "–°–¥–∞–ª" if now <= deadline else "–û–ø–æ–∑–¥–∞–ª"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    link = f"https://t.me/c/{chat_id[4:]}/{message.id}" if chat_id.startswith('-100') else ""

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    record_submission(service, topic_name, name, status, now.strftime("%H:%M"), link)

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
    logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û: {name} ({status}) –≤ {topic_name} ‚Äî –≤—Ä–µ–º—è: {now.strftime('%H:%M')}")

# ====== FLASK HTTP-–°–ï–†–í–ï–† (–¥–ª—è Render) ======
app = Flask(__name__)

@app.route('/')
def health():
    logger.info("üåê –ü–æ–ª—É—á–µ–Ω HTTP-–∑–∞–ø—Ä–æ—Å /health –æ—Ç Render")
    return "‚úÖ Telegram bot is running!", 200

@app.route('/check', methods=['GET'])
def check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    logger.info("üåê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /check ‚Äî –∑–∞–ø—É—Å–∫–∞—é –æ–±—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
    return "<pre>üü¢ –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.</pre>", 200

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, threaded=True, debug=False)

flask_thread = threading.Thread(target=run_flask, daemon=True)
flask_thread.start()

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞...")

    service = get_sheet_service()
    settings = load_settings(service)
    participants = load_participants(service)
    settings_map = {s: settings[s] for s in settings}  # –∫–æ–ø–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    session_path = "/opt/render/project/src/shbm_session"
    client = TelegramClient(session_path, API_ID, API_HASH)

    try:
        await client.start(bot_token=BOT_TOKEN)
        logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram")
    except Exception as e:
        if "FloodWaitError" in str(e):
            logger.critical("üõë –¢–µ–ª–µ–≥—Ä–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç.")
            raise SystemExit(1)
        else:
            logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    # üí° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    button = KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—ë")
    markup = ReplyKeyboardMarkup([[button]])  # –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!

    try:
        await client.send_message(ADMIN_CHAT_ID, "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\nüîò –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã.\n\nüí° –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n`/check_all`\n`/check_–¢–µ–º–∞` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/check_–°–¥–∞—á–∞_–ø—Ä–æ–µ–∫—Ç–∞`)", buttons=markup)
        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É: {e}")

    # üëá –ö–æ–º–∞–Ω–¥–∞: /check_all ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã
    @client.on(events.NewMessage(incoming=True, pattern=r'^/check_all$'))
    async def on_check_all(event):
        logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /check_all")
        await event.reply("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ç–µ–º...")
        await check_all_topics(client, service, settings, participants)

    # üëá –ö–æ–º–∞–Ω–¥–∞: /check_–¢–µ–º–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–Ω—É —Ç–µ–º—É
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º: /check_–°–¥–∞—á–∞_–ø—Ä–æ–µ–∫—Ç–∞
    @client.on(events.NewMessage(incoming=True, pattern=r'^/check_(.+)$'))
    async def on_check_topic(event):
        topic_name = event.pattern_match.group(1).strip()
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /check_{topic_name}")
        await event.reply(f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–º—ã: {topic_name}...")
        await check_specific_topic(client, service, settings, participants, topic_name)

    # üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    @client.on(events.NewMessage(incoming=True))
    async def handler(event):
        await handle_message(event, client, service, settings_map)

    # üëá –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    @client.on(events.NewMessage(incoming=True, pattern=r'^üîç\s*–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—ë$'))
    async def on_button_press(event):
        logger.info("üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—ë'")
        await event.reply("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ç–µ–º...")
        await check_all_topics(client, service, settings, participants)

    logger.info("üì° –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await client.run_until_disconnected()

if __name__ == '__main__':
    logger.info("üèÅ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ shbm_auto_checker.py...")
    asyncio.run(main())
